/*FUNCTION PSR_REPORT*/

CREATE
OR REPLACE FUNCTION PSR_REPORT(
    START_TIME TIMESTAMP_NTZ(9),
    FINISH_TIME TIMESTAMP_NTZ(9)
) RETURNS TABLE (
    NUMBER_OF_FILES NUMBER(38, 0),
    ENTITY_TYPE VARCHAR(200),
    INGESTION_START TIMESTAMP_NTZ(9),
    INGESTION_FINISH TIMESTAMP_NTZ(9),
    STAGEDRECORDS NUMBER(38, 0),
    CURATEDRECORDS NUMBER(38, 0),
    REJECTEDRECORDS NUMBER(38, 0),
    DIFF_HMS TIME(9)
) LANGUAGE SQL AS '
   SELECT
       count(stagedrecords) as NUMBER_OF_FILES,
       ENTITY_TYPE,
       MIN(TS) AS INGESTION_START,
       MAX(TS) AS INGESTION_FINISH,
       SUM(STAGEDRECORDS) AS STAGEDRECORDS,
       SUM(CURATEDRECORDS) AS CURATEDRECORDS,
       SUM(CURATEDREJECTEDRECORDS) AS REJECTEDRECORDS,
       TIME_FROM_PARTS(0,0,TIMESTAMPDIFF(SECOND, INGESTION_START::TIMESTAMP, INGESTION_FINISH::TIMESTAMP)) AS DIFF_HMS
   FROM
       STATS
   WHERE TS >= START_TIME and ts <= FINISH_TIME 
   GROUP BY
       ENTITY_TYPE
   ';


/*FUNCTION PSR_REPORT_DETAILS*/

CREATE
OR REPLACE FUNCTION PSR_REPORT_DETAIL(
    START_TIME TIMESTAMP_NTZ(9),
    FINISH_TIME TIMESTAMP_NTZ(9)
) RETURNS TABLE (
    NUMBER_FILES NUMBER(38, 0),
    ENTITY_TYPE VARCHAR(200),
    FILE_UPLOADED_START TIMESTAMP_NTZ(9),
    FILE_UPLOADED_FINISH TIMESTAMP_NTZ(9),
    DATA_INGESTION_START TIMESTAMP_NTZ(9),
    DATA_INGESTION_FINISH TIMESTAMP_NTZ(9),
    STAGING_STORE_START TIMESTAMP_NTZ(9),
    STAGING_STORE_FINISH TIMESTAMP_NTZ(9),
    VALIDATION_SERVICE_START TIMESTAMP_NTZ(9),
    VALIDATION_SERVICE_FINISH TIMESTAMP_NTZ(9),
    CURATED_STORE_START TIMESTAMP_NTZ(9),
    CURATED_STORE_FINISH TIMESTAMP_NTZ(9),
    DIFF_HMS TIME(9)
) LANGUAGE SQL AS '
   SELECT 
        COUNT(ENTITY_TYPE) AS NUMBER_FILES,
        ENTITY_TYPE,
        MIN(FILE_UPLOADED) AS FILE_UPLOADED_START,
        MAX(FILE_UPLOADED) AS FILE_UPLOADED_FINISH, 
        MIN(DATA_INGESTION_STARTED) AS DATA_INGESTION_START,
        MAX(DATA_INGESTION_STARTED) AS DATA_INGESTION_FINISH,
        MIN(STAGING_STORE) AS STAGING_STORE_START , 
        MAX(STAGING_STORE) AS STAGING_STORE_FINISH, 
        MIN(VALIDATION_SERVICE) AS VALIDATION_SERVICE_START ,
        MAX(VALIDATION_SERVICE) AS VALIDATION_SERVICE_FINISH, 
        MIN(CURATED_STORE) AS CURATED_STORE_START,
        MAX(CURATED_STORE) AS CURATED_STORE_FINISH,
        TIME_FROM_PARTS(0,0,TIMESTAMPDIFF(SECOND, FILE_UPLOADED_START::TIMESTAMP, CURATED_STORE_FINISH::TIMESTAMP)) AS DIFF_HMS
   FROM 
        PSR_REPORT_DETAILS 
   WHERE FILE_UPLOADED >= START_TIME  AND FILE_UPLOADED <= FINISH_TIME
   GROUP BY 
        ENTITY_TYPE
   ';



/*VIEW PSR_REPORT_DETAILS*/

CREATE
OR REPLACE VIEW PSR_REPORT_DETAILS (
    ENTITY_TYPE,
    FILENAME,
    FILE_UPLOADED,
    DATA_INGESTION_STARTED,
    STAGING_STORE,
    VALIDATION_SERVICE,
    CURATED_STORE,
    DIFF_HMS,
    STAGEDRECORDS,
    CURATEDRECORDS,
    REJECTRECORDS,
    STATUS_VALIDATION,
    ERROR_MESSAGE
) AS
SEELCT
    T1.ENTITY_TYPE,
    t1.filename,
    t1.ts FILE_UPLOADED,
    t2.ts DATA_INGESTION_STARTED,
    t3.ts STAGING_STORE,
    t4.ts VALIDATION_SERVICE,
    t5.ts CURATED_STORE,
    TIME_FROM_PARTS(0,0,TIMESTAMPDIFF(SECOND,FILE_UPLOADED::TIMESTAMP, CURATED_STORE::TIMESTAMP)) AS DIFF_HMS,
    t5.stagedrecords,
    t5.curatedrecords,
    t5.stagedrecords - t5.curatedrecords REJECTRECORDS,
    t4.status STATUS_VALIDATION,
    T5.ERROR_MESSAGE
    from
        stats t1
        join stats t2 on t1.messageid = t2.messageid
        JOIN stats t3 on t1.messageid = t3.messageid
        join stats t4 on t1.messageid = t4.messageid
        join stats t5 on t1.messageid = t5.messageid
    where
        (
            t1.status = 'FILE_UPLOADED'
            and t2.status = 'DATA_INGESTION_STARTED'
        )
        and (
            t3.status = 'DATA_MERGED_FROM_STAGE_INTO_STAGING_STORE'
        )
        and (
            t4.status = 'DATA_VALIDATIONS_COMPLETED_WITH_ERROR'
            or t4.status = 'DATA_VALIDATIONS_DONE'
            or t4.status = 'DATA_VALIDATIONS_COMPLETED_WITH_WARNINGS'
        )
        and (
            t5.status = 'DATA_MERGED_FROM_STAGING_INTO_CURATED_STORE'
        )
    union all
    select
        T1.ENTITY_TYPE,
        t1.filename,
        t1.ts FILE_UPLOADED,
        t2.ts DATA_INGESTION_STARTED,
        t3.ts STAGING_STORE,
        t4.ts VALIDATION_SERVICE,
        null,
        TIME_FROM_PARTS(0,0,TIMESTAMPDIFF(SECOND,FILE_UPLOADED::TIMESTAMP, VALIDATION_SERVICE::TIMESTAMP)) AS DIFF_HMS,
        t4.stagedrecords,
        t4.curatedrecords,
        T4.STAGEDRECORDS - T4.CURATEDRECORDS REJECTEDRECORDS,
        t4.status STATUS_VALIDATION,
        T4.ERROR_MESSAGE
        from
            stats t1
            join stats t2 on t1.messageid = t2.messageid
            JOIN stats t3 on t1.messageid = t3.messageid
            join stats t4 on t1.messageid = t4.messageid
        where
            (
                t1.status = 'FILE_UPLOADED'
                and t2.status = 'DATA_INGESTION_STARTED'
            )
            and (
                t3.status = 'DATA_MERGED_FROM_STAGE_INTO_STAGING_STORE'
            )
            and (t4.status = 'INGESTION_FAILED')
        ORDER BY
            FILE_UPLOADED;

/* QUERY EXAMPLE FUNCTIONS*/
select *  from  table(PSR_REPORT_DETAIL(TO_TIMESTAMP('2022-06-28 16:06:54.239', 'YYYY-MM-DD HH24:MI:SS.FF3'),TO_TIMESTAMP('2022-06-28 16:50:54.239', 'YYYY-MM-DD HH24:MI:SS.FF3')));
select *  from  table(PSR_REPORT(TO_TIMESTAMP('2022-06-22 19:30:41.617', 'YYYY-MM-DD HH24:MI:SS.FF3'),TO_TIMESTAMP('2022-07-22 20:30:41.617', 'YYYY-MM-DD HH24:MI:SS.FF3')));